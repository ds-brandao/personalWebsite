name: Deploy Website

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  deploy:
    runs-on: self-hosted

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event.pull_request.head.sha }}
        fetch-depth: 0  # Fetch all history and tags
    
    - name: Create missing directories
      run: |
        echo "Creating any missing directories required by docker-compose..."
        mkdir -p ./articles
        mkdir -p ./projects
        ls -la
        
    - name: Verify content and permissions
      run: |
        echo "Checking key directories and files..."
        ls -la
        echo "Content of config directory:"
        ls -la ./config
        echo "Content of articles directory:"
        ls -la ./articles
        echo "Content of projects directory:"
        ls -la ./projects || echo "Projects directory not found or empty"
        echo "Content of blog-posts directory:"
        ls -la ./blog-posts
        echo "Content of images/blog directory:"
        ls -la ./images/blog || echo "Images/blog directory not found or empty"
        echo "Setting proper permissions..."
        # Ensure proper permissions on all directories
        chmod -R 755 ./*
        
    - name: Create config copy script
      run: |
        cat > ensure-config.sh << 'EOF'
        #!/bin/bash
        
        # This script ensures configuration files are properly copied inside the container
        # after it starts, to handle any potential volume mounting issues
        
        echo "Ensuring configuration files are properly available..."
        
        # Wait for containers to be up
        sleep 10
        
        # Get the web container ID
        WEB_CONTAINER=$(docker compose ps -q web)
        
        if [ -z "$WEB_CONTAINER" ]; then
          echo "Error: Web container not found!"
          exit 1
        fi
        
        echo "Copying config files to web container $WEB_CONTAINER..."
        
        # Copy the config files directly into the container
        docker cp ./config/config.json $WEB_CONTAINER:/usr/share/nginx/html/config/
        docker cp ./config/articles.json $WEB_CONTAINER:/usr/share/nginx/html/config/
        docker cp ./config/projects.json $WEB_CONTAINER:/usr/share/nginx/html/config/
        
        # Copy blog posts to ensure they're available
        docker exec $WEB_CONTAINER mkdir -p /usr/share/nginx/html/blog-posts
        for file in ./blog-posts/*; do
          if [ -f "$file" ]; then
            echo "Copying $file to container..."
            docker cp "$file" $WEB_CONTAINER:/usr/share/nginx/html/blog-posts/
          fi
        done
        
        # Create necessary directories inside the container if they don't exist
        docker exec $WEB_CONTAINER mkdir -p /usr/share/nginx/html/articles
        docker exec $WEB_CONTAINER mkdir -p /usr/share/nginx/html/projects
        
        # Set proper permissions inside container
        docker exec $WEB_CONTAINER chmod -R 755 /usr/share/nginx/html/config
        docker exec $WEB_CONTAINER chmod -R 755 /usr/share/nginx/html/articles
        docker exec $WEB_CONTAINER chmod -R 755 /usr/share/nginx/html/projects
        docker exec $WEB_CONTAINER chmod -R 755 /usr/share/nginx/html/blog-posts
        
        echo "Configuration files copied successfully."
        
        # Check that the files are there
        echo "Verifying files in container:"
        docker exec $WEB_CONTAINER ls -la /usr/share/nginx/html/config/
        docker exec $WEB_CONTAINER ls -la /usr/share/nginx/html/blog-posts/
        EOF
        
        chmod +x ensure-config.sh
        
    - name: Create console error checking script
      run: |
        cat > check-console-errors.sh << 'EOF'
        #!/bin/bash
        
        # This script uses curl to fetch the HTML and analyzes it for potential issues
        
        # Get the web container IP
        WEB_CONTAINER=$(docker compose ps -q web)
        WEB_IP=$(docker inspect -f '{{range.NetworkSettings.Networks}}{{.IPAddress}}{{end}}' $WEB_CONTAINER)
        
        echo "Fetching HTML from web container at $WEB_IP..."
        HTML=$(curl -s http://$WEB_IP:80/)
        
        echo "Checking for JavaScript errors or issues..."
        
        # Check if config.json is being loaded
        if echo "$HTML" | grep -q "loadConfig"; then
          echo "✅ HTML includes loadConfig function"
        else
          echo "❌ HTML is missing loadConfig function"
        fi
        
        # Check if key functions are defined
        if echo "$HTML" | grep -q "fetchRepos"; then
          echo "✅ HTML includes fetchRepos function"
        else
          echo "❌ HTML is missing fetchRepos function"
        fi
        
        if echo "$HTML" | grep -q "loadBlogPosts"; then
          echo "✅ HTML includes loadBlogPosts function"
        else
          echo "❌ HTML is missing loadBlogPosts function"
        fi
        
        # Save HTML for inspection if needed
        echo "$HTML" > /tmp/website-html.txt
        echo "HTML saved to /tmp/website-html.txt for inspection"
        
        echo "Done checking for JavaScript issues."
        EOF
        
        chmod +x check-console-errors.sh
        
    - name: Stop existing containers
      run: docker compose down || true
      
    - name: Build the Docker image with retry logic
      run: docker compose build
      
    - name: Pull required Docker images
      run: |
        # Pre-pull the node image with retry logic
        for i in {1..3}; do
          echo "Attempt $i to pull node:18-alpine image..."
          docker pull node:18-alpine && break || sleep 10
        done
      continue-on-error: true
      
    - name: Check and free required ports
      run: |
        echo "Checking if port 3000 is in use..."
        if lsof -i :3000 > /dev/null 2>&1; then
          echo "Port 3000 is in use. Attempting to free it..."
          # Find the process using port 3000
          PID=$(lsof -t -i :3000)
          if [ ! -z "$PID" ]; then
            echo "Killing process $PID that is using port 3000"
            kill -9 $PID || true
            sleep 2
          fi
        else
          echo "Port 3000 is available"
        fi
        
        # Double check to make sure port is free now
        if lsof -i :3000 > /dev/null 2>&1; then
          echo "Warning: Port 3000 is still in use despite attempt to free it"
        else
          echo "Port 3000 is now available"
        fi
      continue-on-error: true
      
    - name: Run and test website build with retry logic
      id: test_website
      run: |
        # Start containers in the background with retry logic
        MAX_RETRIES=3
        RETRY_COUNT=0
        
        while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
          echo "Attempt $(($RETRY_COUNT+1)) of $MAX_RETRIES to start containers..."
          if docker compose up -d; then
            echo "Containers started successfully"
            break
          else
            RETRY_COUNT=$(($RETRY_COUNT+1))
            if [ $RETRY_COUNT -lt $MAX_RETRIES ]; then
              echo "Failed to start containers, retrying in 30 seconds..."
              # Try to identify and kill processes using port 3000 before retrying
              PID=$(lsof -t -i :3000 2>/dev/null)
              if [ ! -z "$PID" ]; then
                echo "Found process $PID using port 3000, attempting to kill it"
                kill -9 $PID || true
                sleep 5
              fi
              sleep 25
            else
              echo "Failed to start containers after $MAX_RETRIES attempts"
              exit 1
            fi
          fi
        done
        
        # Run the config copy script to ensure files are available
        ./ensure-config.sh
        
        # Wait for container to be fully up and running
        echo "Waiting for container to be ready..."
        sleep 60
        
        # Display Docker Compose logs for debugging
        echo "Docker Compose logs:"
        docker compose logs
        
        # Check if config files are properly mounted in the container
        echo "Checking config files in the container:"
        docker exec $(docker compose ps -q web) ls -la /usr/share/nginx/html/config || echo "Failed to check config directory in container"
        
        # Simple test to check if the website is accessible
        # Try direct access to nginx container if browsersync fails
        if ! curl -s -o /dev/null -w "%{http_code}" http://localhost:3000 | grep 200; then
          echo "Trying direct access to web container..."
          # Get the web container IP
          WEB_IP=$(docker inspect -f '{{range.NetworkSettings.Networks}}{{.IPAddress}}{{end}}' $(docker compose ps -q web))
          # The web container exposes port 80 internally, not 3000
          curl -s -o /dev/null -w "%{http_code}" http://$WEB_IP:80 | grep 200
        fi
      continue-on-error: true

    - name: Check test results and deploy
      run: |
        if [ "${{ steps.test_website.outcome }}" == "success" ]; then
          echo "Tests passed successfully. Website is accessible."
          # The container is already running from the test step
          
          # Run JavaScript console error checking script
          echo "Checking for JavaScript console errors..."
          ./check-console-errors.sh
          
          # Now let's check for any JavaScript errors
          echo "Checking for JavaScript errors in the web container logs:"
          docker compose logs web | grep -i "error" || echo "No obvious JavaScript errors found"
          
          # Verify content of critical files in the container
          echo "Verifying config.json in container:"
          docker exec $(docker compose ps -q web) cat /usr/share/nginx/html/config/config.json || echo "Failed to read config.json"
          
          echo "Verifying articles.json in container:"
          docker exec $(docker compose ps -q web) cat /usr/share/nginx/html/config/articles.json || echo "Failed to read articles.json"
          
          # Verify image directories
          echo "Checking if image directories exist in container:"
          docker exec $(docker compose ps -q web) ls -la /usr/share/nginx/html/images/blog || echo "Images/blog directory not found in container"
          
          # Copy any missing image files
          echo "Ensuring image files exist in container..."
          docker exec $(docker compose ps -q web) mkdir -p /usr/share/nginx/html/images/blog
          for img in ./images/blog/*; do
            if [ -f "$img" ]; then
              filename=$(basename "$img")
              echo "Copying image $filename to container..."
              docker cp "$img" $(docker compose ps -q web):/usr/share/nginx/html/images/blog/
            fi
          done
        else
          echo "Tests failed. Website is not accessible."
          # Check if the web container is running even if tests failed
          if docker compose ps | grep -q "web.*Up"; then
            echo "Web container is still running, proceeding with deployment anyway..."
            
            # Add additional debug steps for troubleshooting
            echo "Checking web container logs:"
            docker compose logs web
            
            # Run JavaScript console error checking script even on failure
            echo "Checking for JavaScript console errors..."
            ./check-console-errors.sh || echo "Error checking script failed"
          else
            echo "Stopping containers...."
            docker compose down
            exit 1
          fi
        fi
    
    - name: Clean up
      if: always()
      run: |
        # Remove any unused images and volumes
        docker system prune -f