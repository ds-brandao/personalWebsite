name: Deploy Website

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  deploy:
    runs-on: self-hosted

    steps:
    - uses: actions/checkout@v4
    
    - name: Stop existing containers
      run: docker-compose down || true
      
    - name: Build the Docker image
      run: docker-compose build
      
    - name: Pre-pull required Docker images
      run: |
        # Pre-pull the node:14 image with retry logic
        for i in {1..3}; do
          echo "Attempt $i to pull node:14 image..."
          docker pull node:14 && break || sleep 10
        done
      continue-on-error: true
      
    - name: Run and test website
      id: test_website
      run: |
        # Start containers in the background with retry logic
        MAX_RETRIES=3
        RETRY_COUNT=0
        
        while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
          echo "Attempt $(($RETRY_COUNT+1)) of $MAX_RETRIES to start containers..."
          if docker-compose up -d; then
            echo "Containers started successfully"
            break
          else
            RETRY_COUNT=$(($RETRY_COUNT+1))
            if [ $RETRY_COUNT -lt $MAX_RETRIES ]; then
              echo "Failed to start containers, retrying in 30 seconds..."
              sleep 30
            else
              echo "Failed to start containers after $MAX_RETRIES attempts"
              exit 1
            fi
          fi
        done
        
        # Wait for container to be fully up and running
        echo "Waiting for container to be ready..."
        sleep 60
        
        # Simple test to check if the website is accessible
        # Try direct access to nginx container if browsersync fails
        if ! curl -s -o /dev/null -w "%{http_code}" http://localhost:3000 | grep 200; then
          echo "Trying direct access to web container..."
          # Get the web container IP
          WEB_IP=$(docker inspect -f '{{range.NetworkSettings.Networks}}{{.IPAddress}}{{end}}' $(docker-compose ps -q web))
          curl -s -o /dev/null -w "%{http_code}" http://$WEB_IP:3000 | grep 200
        fi
      continue-on-error: true

    - name: Check test results and deploy
      run: |
        if [ "${{ steps.test_website.outcome }}" == "success" ]; then
          echo "Tests passed successfully. Website is accessible."
          # The container is already running from the test step
        else
          echo "Tests failed. Website is not accessible."
          # Check if the web container is running even if tests failed
          if docker-compose ps | grep -q "web.*Up"; then
            echo "Web container is still running, proceeding with deployment anyway..."
          else
            echo "Stopping containers..."
            docker-compose down
            exit 1
          fi
        fi
    
    - name: Clean up
      if: always()
      run: |
        # Remove any unused images and volumes
        docker system prune -f